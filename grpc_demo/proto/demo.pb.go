// Code generated by protoc-gen-go. DO NOT EDIT.
// source: demo.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Say                  string   `protobuf:"bytes,1,opt,name=say,proto3" json:"say,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetSay() string {
	if m != nil {
		return m.Say
	}
	return ""
}

type HelloResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{1}
}

func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResponse.Unmarshal(m, b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return xxx_messageInfo_HelloResponse.Size(m)
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "HelloResponse")
}

func init() { proto.RegisterFile("demo.proto", fileDescriptor_ca53982754088a9d) }

var fileDescriptor_ca53982754088a9d = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x49, 0xcd, 0xcd,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe0, 0xe2, 0xf1, 0x48, 0xcd, 0xc9, 0xc9, 0x0f,
	0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62, 0x2e, 0x4e, 0xac, 0x94, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0xb4, 0xb9, 0x78, 0xa1, 0x2a, 0x8a, 0x0b, 0xf2, 0xf3,
	0x8a, 0x53, 0x85, 0xa4, 0xb8, 0x38, 0x8a, 0xa0, 0x6c, 0xa8, 0x3a, 0x38, 0xdf, 0xa8, 0x9d, 0x91,
	0x8b, 0xc5, 0x25, 0x35, 0x37, 0x5f, 0x48, 0x83, 0x8b, 0x15, 0xac, 0x4b, 0x88, 0x57, 0x0f, 0xd9,
	0x7c, 0x29, 0x3e, 0x3d, 0x14, 0xc3, 0x94, 0x18, 0x84, 0x74, 0xb8, 0xd8, 0x9d, 0x33, 0x12, 0xf3,
	0xf2, 0x52, 0x73, 0x08, 0xa8, 0xd5, 0x60, 0x34, 0x60, 0x14, 0x52, 0xe7, 0x62, 0x09, 0x28, 0xcd,
	0x21, 0xa4, 0xd4, 0x80, 0xd1, 0x89, 0x33, 0x8a, 0x5d, 0xcf, 0x1a, 0xec, 0xc7, 0x24, 0x36, 0x30,
	0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x22, 0x88, 0xc8, 0xb9, 0xf8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DemoClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	Channel(ctx context.Context, opts ...grpc.CallOption) (Demo_ChannelClient, error)
	Pull(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Demo_PullClient, error)
}

type demoClient struct {
	cc *grpc.ClientConn
}

func NewDemoClient(cc *grpc.ClientConn) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/Demo/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Channel(ctx context.Context, opts ...grpc.CallOption) (Demo_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Demo_serviceDesc.Streams[0], "/Demo/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoChannelClient{stream}
	return x, nil
}

type Demo_ChannelClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type demoChannelClient struct {
	grpc.ClientStream
}

func (x *demoChannelClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoChannelClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoClient) Pull(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Demo_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Demo_serviceDesc.Streams[1], "/Demo/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Demo_PullClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type demoPullClient struct {
	grpc.ClientStream
}

func (x *demoPullClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServer is the server API for Demo service.
type DemoServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	Channel(Demo_ChannelServer) error
	Pull(*HelloRequest, Demo_PullServer) error
}

// UnimplementedDemoServer can be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (*UnimplementedDemoServer) Hello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedDemoServer) Channel(srv Demo_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (*UnimplementedDemoServer) Pull(req *HelloRequest, srv Demo_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}

func RegisterDemoServer(s *grpc.Server, srv DemoServer) {
	s.RegisterService(&_Demo_serviceDesc, srv)
}

func _Demo_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demo/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).Channel(&demoChannelServer{stream})
}

type Demo_ChannelServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type demoChannelServer struct {
	grpc.ServerStream
}

func (x *demoChannelServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoChannelServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Demo_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).Pull(m, &demoPullServer{stream})
}

type Demo_PullServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type demoPullServer struct {
	grpc.ServerStream
}

func (x *demoPullServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Demo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Demo_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _Demo_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _Demo_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "demo.proto",
}
